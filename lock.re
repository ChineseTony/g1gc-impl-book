= スレッドの排他制御

本章ではスレッドの共有リソースにアクセスするための排他制御について説明します。
GCで利用するスレッドはオブジェクトを共有リソースとして扱いますので、排他制御が必要になる場合があります。

排他制御の実装については、GCを読んでいく上で必要ありませんので詳しく説明しません。
本書では概要の説明までに留めます。

== 排他制御とは

メモリ領域を共有するスレッドでは、同じ位置にあるデータを複数のスレッドが同時に読み書きできてしまいます。
スレッドで共有しているデータが、他のスレッドから割り込みで変更される可能性があるにもかかわらず、割り込みを想定していないコードを書いてしまった場合は、思わぬところでメモリ破壊が生じ、想定不可能なエラーが発生してしまいます。

このように単一のリソースに対して、複数のスレッドから同時に処理が実行されるとまずい部分を@<b>{クリティカルセクション}と呼びます。

クリティカルセクションを扱う処理では、スレッド単体でアトミックに一連の処理を実行し、他のスレッドが割り込まないように排除する必要があります。
このように他のスレッドを排除し、あるスレッドだけでリソースを独占的に利用させることを@<b>{排他制御}と呼びます。

== ミューテックス（Mutex）

排他制御の単純な実装例としてよく利用されるのが@<b>{ミューテックス（Mutex）}です。これはmutal exclusion（相互排他）の略からきた造語です。

ミューテックスの例え話はいくつもありますが、ここでは武者さんが書かれたトイレの例@<bib>{webdb_can_thread}を取り上げてみます。

//quote{
トイレが1つしかない家に、何人かの家族が住んでいるとします。
トイレの使用にあたっては決まりがあり、ドアプレートの表示が「使用中」のときは中に入ることができず、入りたい人は外で待機します。
「空室」のプレートに当たった人は、これを裏返して「使用中」にすると中に入る権利を得て、独占的にトイレを使えます。
トイレを使い終わった人は「使用中」のプレートを「空室」に戻しますが、ほかの人がこの操作を行うことは許されません。
このとき、プレートを「使用中」に替えることをロック（lock）、「空室」に戻すことをアンロック（unlock）、トイレのことをクリティカルセクション（critical section）といいます。
//}

いくら仲のいい家族でも2人同時にトイレを利用しないですよね（きっと）。
ですので、家族ひとりひとりがスレッドだとしたら、トイレがクリティカルセクションにあたるのもうなずけます。

//quote{
このしくみにより、ドアのノックを交わす必要はなくなり、すでに人が入っているところに別の人が入ることもなくなります。
これがミューテックスです。
//}

ミューテックスは排他制御の基本的な実装であり、ミューテックスを土台として様々な排他制御が実装されます。

== モニタ（Monitor）

Java言語では言語自体に@<b>{モニタ（Monitor）}という同期機構が組み込まれています。
そして、HotspotVMの内部の排他制御はほとんどがこのモニタを使って行われます。

早速、モニタの説明に入りたいところですが一つ注意点があります。
Java言語で利用されているモニタは実は一般的に知られているモニタとは少しことなります。
ですので、一般的なモニタについて知りたい場合は武者さんの記事@<bib>{webdb_can_thread}を読まれることをお勧めします。

さて、Java言語のモニタについてもあるたとえ話を持ちだしてみます。
TODO:条件変数の粒度が異なる。

== モニタの実装概要

== Monitorクラス

== MutexLockerクラス
